{"version":3,"sources":["components/Post.jsx","contexts/PostsContext.js","components/Posts.jsx","components/PostEditForm.jsx","components/PostActions.jsx","App.js","reportWebVitals.js","index.js"],"names":["dateOptions","minute","hour","day","month","year","Post","props","id","className","content","Date","created","toLocaleDateString","PostsContext","createContext","PostsProvider","useState","localStorage","getItem","JSON","parse","posts","setPosts","useEffect","setItem","stringify","Provider","value","children","Posts","useContext","a","fetch","process","response","ok","json","console","error","statusText","status","fetchPosts","map","post","to","NewPost","newPost","setNewPost","submitHandler","event","preventDefault","method","headers","body","history","push","onSubmit","name","placeholder","autoFocus","onChange","target","type","PostActions","isEditing","setEditing","PostContext","find","match","params","deleteBtnHandler","onClick","App","basename","path","component","PostEditForm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ab48571.chunk.js","sourcesContent":["const dateOptions = {\n  minute: '2-digit',\n  hour: '2-digit',\n  // weekday: 'long',\n  day: 'numeric',\n  month: 'long',\n  year: 'numeric'\n};\n\nexport default function Post(props) {\n  if (!props.id) return (\n    <div className=\"post-container\">\n      Post not found.\n    </div>\n  )\n\n  return (\n    <div className=\"post-container\">\n      <pre className=\"post-content\">\n        {props.content}\n      </pre>\n      <div className=\"post-date\">\n        {new Date(props.created).toLocaleDateString('ru-RU', dateOptions)}\n      </div>\n    </div>\n  )\n}\n","import { createContext, useState, useEffect } from 'react';\n\nconst PostsContext = createContext([]);\nexport default PostsContext;\n\nexport function PostsProvider(props) {\n  const [posts, setPosts] = useState(\n    localStorage.getItem('posts') ?\n      JSON.parse(localStorage.getItem('posts'))\n      : []\n  );\n\n  useEffect(() => {\n    localStorage.setItem('posts', JSON.stringify(posts));\n  }, [posts]);\n\n  // const [posts, setPosts] = useState([]);\n\n  // useEffect(() => {\n  //   const fetchPosts = async () => {\n  //     const response = await fetch(process.env.REACT_APP_POSTS);\n  //     if (response.ok) {\n  //       try {\n  //         const posts = await response.json();\n  //         setPosts(posts);\n  //       } catch {\n  //         console.error('Error parsing server response: probably not a JSON');\n  //       }\n  //     } else {\n  //       console.error(response.statusText + ', status: ' + response.status);\n  //     }\n  //   }\n\n  //   fetchPosts();\n  // }, []);\n\n  return (\n    <PostsContext.Provider value={{ posts, setPosts }}>\n      {props.children}\n    </PostsContext.Provider>\n  )\n}\n","import { useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport Post from './Post';\nimport PostsContext from '../contexts/PostsContext';\n\n\nexport default function Posts() {\n  const { posts, setPosts } = useContext(PostsContext);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const response = await fetch(process.env.REACT_APP_POSTS);\n      if (response.ok) {\n        try {\n          const posts = await response.json();\n          setPosts(posts);\n        } catch {\n          console.error('Error parsing server response: probably not a JSON');\n        }\n      } else {\n        console.error(response.statusText + ', status: ' + response.status);\n      }\n    }\n\n    fetchPosts();\n  }, [setPosts]);\n\n  // const { posts } = useContext(PostsContext);\n\n  return (\n    <>\n      <div className=\"posts-container\">\n        {posts.map(post => {\n          return (\n            <Link className=\"link\" to={`/posts/${post.id}`} key={post.id}>\n              <Post {...post} />\n            </Link>\n          )\n        })}\n        <Link className=\"link nav-link\" to=\"/posts/new\">\n          <div className=\"post-action-btn btn-edit\">\n            New post\n          </div>\n        </Link>\n      </div>\n    </>\n  )\n}\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function NewPost(props) {\n  const [newPost, setNewPost] = useState({ id: props.id || 0, content: props.content || '' });\n\n  const submitHandler = async event => {\n    event.preventDefault();\n\n    const response = await fetch(process.env.REACT_APP_POSTS, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(newPost)\n    });\n    if (response.ok) {\n      props.history.push('/');\n    }\n  }\n\n  const inputHandler = event => {\n    setNewPost({ ...newPost, [event.target.name]: event.target.value });\n  }\n\n  return (\n    <div className=\"post-edit-wrapper\">\n      <form className=\"post-edit-form\" onSubmit={submitHandler}>\n        <textarea\n          className=\"post-edit-content\"\n          name=\"content\"\n          placeholder=\"Post content\"\n          autoFocus={true}\n          value={newPost.content}\n          onChange={inputHandler}\n        />\n        <button className=\"post-edit-submit-btn post-action-btn btn-edit\" type=\"submit\">\n          {props.id ? 'Submit' : 'Add'}\n        </button>\n        <Link to=\"/\" className=\"link\"><div className=\"post-edit-close\">âœ—</div></Link>\n      </form>\n    </div>\n  )\n}\n","import { useState, useContext } from 'react';\nimport PostContext from '../contexts/PostsContext';\nimport NewPost from './PostEditForm';\nimport Post from './Post';\nimport { Link } from 'react-router-dom';\n\nexport default function PostActions(props) {\n  const [isEditing, setEditing] = useState(false);\n\n  const { posts } = useContext(PostContext);\n  const post = posts.find(post => post.id === +props.match.params.id);\n\n  if (!post) {\n    return (\n      <>\n        <Post />\n        <div className=\"edit-delete-container\">\n          <Link to=\"/\" className=\"link\"><div className=\"post-action-btn btn-edit single-btn\">Back</div></Link>\n        </div>\n      </>\n    )\n  }\n\n  const editBtnHandler = () => {\n    setEditing(!isEditing);\n  }\n\n  const deleteBtnHandler = async () => {\n    const response = await fetch(process.env.REACT_APP_POSTS + '/' + post.id, {\n      method: 'DELETE',\n    });\n\n    if (response.ok) {\n      props.history.push('/');\n    }\n  }\n\n  return (\n    <div className=\"post-actions-wrapper\">\n      <Post {...post} />\n      {isEditing ?\n        <NewPost {...post} {...props} />\n        : <div className=\"post-actions-container\">\n          <Link to=\"/\" className=\"link\"><div className=\"post-action-btn btn-edit\">Back</div></Link>\n          <div className=\"edit-delete-container\">\n            <div className=\"post-action-btn btn-edit\" onClick={editBtnHandler}>Edit</div>\n            <div className=\"post-action-btn btn-delete\" onClick={deleteBtnHandler}>Delete</div>\n          </div>\n        </div>}\n    </div>\n  )\n}\n","import './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Posts from './components/Posts';\nimport PostEditForm from './components/PostEditForm';\nimport PostActions from './components/PostActions';\nimport { PostsProvider } from './contexts/PostsContext';\n\nfunction App() {\n  return (\n    <Router basename=\"/ra-router-2-front\">\n      <PostsProvider>\n        <Switch>\n          <Route path=\"/posts/new\" component={PostEditForm} />\n          <Route path=\"/posts/:id\" component={PostActions} />\n          <Route path=\"/\" component={Posts} />\n          <Route path=\"*\" component={Posts} />\n        </Switch>\n      </PostsProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}